import psijax
import numpy as np
import jax.numpy as jnp
np.set_printoptions(linewidth=800, precision=10)

import psi4
import time
psi4.core.be_quiet()

molecule = psi4.geometry("""
                         0 1
                         O    0.00000000     0.00000000     0.12882324
                         H    0.00000000    -1.41550568    -1.02225912
                         H    0.00000000     1.41550568    -1.02225912
                         symmetry c1
                         units bohr 
                         """)

basis_name = 'cc-pvdz'
psi4.set_memory(int(5e9))
psi4.set_options({'basis': basis_name, 'scf_type': 'pk', 'mp2_type':'conv', 'e_convergence': 1e-10, 'diis': True, 'd_convergence':1e-10, 'puream': 0, 'points':5, 'fd_project':False})

# CFOUR analytic Hessians at above geometry. In Hartree/Bohr^2
cfour_scf = np.array([[ 0.0261403318,  0.          ,  0.          , -0.0130701659,  0.          ,  0.          , -0.0130701659,  0.          ,  0.          ],
                      [ 0.          ,  0.6731245879,  0.          ,  0.          , -0.3365622939, -0.2630622311,  0.          , -0.3365622939,  0.2630622311],
                      [ 0.          ,  0.          ,  0.5116129656,  0.          , -0.1988745504, -0.2558064827,  0.          ,  0.1988745504, -0.2558064827],
                      [-0.0130701659,  0.          ,  0.          ,  0.0110533896,  0.          ,  0.          ,  0.0020167763,  0.          ,  0.          ],
                      [ 0.          , -0.3365622939, -0.1988745504,  0.          ,  0.3736349847,  0.2309683907,  0.          , -0.0370726907, -0.0320938403],
                      [ 0.          , -0.2630622311, -0.2558064827,  0.          ,  0.2309683907,  0.2393820139,  0.          ,  0.0320938403,  0.016424469 ],
                      [-0.0130701659,  0.          ,  0.          ,  0.0020167763,  0.          ,  0.          ,  0.0110533896,  0.          ,  0.          ],
                      [ 0.          , -0.3365622939,  0.1988745504,  0.          , -0.0370726907,  0.0320938403,  0.          ,  0.3736349847, -0.2309683907],
                      [ 0.          ,  0.2630622311, -0.2558064827,  0.          , -0.0320938403,  0.016424469 ,  0.          , -0.2309683907,  0.2393820139]])

cfour_mp2 = np.array([[ 1.415022500e-03,  0.000000000e+00,  0.000000000e+00, -7.075112000e-04,  0.000000000e+00,  0.000000000e+00, -7.075112000e-04,  0.000000000e+00,  0.000000000e+00],
                      [ 0.000000000e+00,  6.670504830e-01,  0.000000000e+00,  0.000000000e+00, -3.335252415e-01, -2.706457656e-01,  0.000000000e+00, -3.335252415e-01,  2.706457656e-01],
                      [ 0.000000000e+00,  0.000000000e+00,  4.778766186e-01,  0.000000000e+00, -2.040187837e-01, -2.389383093e-01,  0.000000000e+00,  2.040187837e-01, -2.389383093e-01],
                      [-7.075112000e-04,  0.000000000e+00,  0.000000000e+00,  7.738759000e-04,  0.000000000e+00,  0.000000000e+00, -6.636470000e-05,  0.000000000e+00,  0.000000000e+00],
                      [ 0.000000000e+00, -3.335252415e-01, -2.040187837e-01,  0.000000000e+00,  3.666183411e-01,  2.373322747e-01,  0.000000000e+00, -3.309309960e-02, -3.331349090e-02],
                      [ 0.000000000e+00, -2.706457656e-01, -2.389383093e-01,  0.000000000e+00,  2.373322747e-01,  2.299331875e-01,  0.000000000e+00,  3.331349090e-02,  9.005121800e-03],
                      [-7.075112000e-04,  0.000000000e+00,  0.000000000e+00, -6.636470000e-05,  0.000000000e+00,  0.000000000e+00,  7.738759000e-04,  0.000000000e+00,  0.000000000e+00],
                      [ 0.000000000e+00, -3.335252415e-01,  2.040187837e-01,  0.000000000e+00, -3.309309960e-02,  3.331349090e-02,  0.000000000e+00,  3.666183411e-01, -2.373322747e-01],
                      [ 0.000000000e+00,  2.706457656e-01, -2.389383093e-01,  0.000000000e+00, -3.331349090e-02,  9.005121800e-03,  0.000000000e+00, -2.373322747e-01,  2.299331875e-01]])

cfour_ccsdt = np. array([[ 1.600000000e-09,  0.000000000e+00,  0.000000000e+00, -8.000000000e-10,  0.000000000e+00,  0.000000000e+00, -8.000000000e-10,  0.000000000e+00,  0.000000000e+00],
                         [ 0.000000000e+00,  6.582813731e-01,  0.000000000e+00,  0.000000000e+00, -3.291406866e-01, -2.676556108e-01,  0.000000000e+00, -3.291406866e-01,  2.676556108e-01],
                         [ 0.000000000e+00,  0.000000000e+00,  4.777598991e-01,  0.000000000e+00, -2.021001856e-01, -2.388799495e-01,  0.000000000e+00,  2.021001856e-01, -2.388799495e-01],
                         [-8.000000000e-10,  0.000000000e+00,  0.000000000e+00,  6.000000000e-10,  0.000000000e+00,  0.000000000e+00,  2.000000000e-10,  0.000000000e+00,  0.000000000e+00],
                         [ 0.000000000e+00, -3.291406866e-01, -2.021001856e-01,  0.000000000e+00,  3.635116882e-01,  2.348778982e-01,  0.000000000e+00, -3.437100160e-02, -3.277771260e-02],
                         [ 0.000000000e+00, -2.676556108e-01, -2.388799495e-01,  0.000000000e+00,  2.348778982e-01,  2.282680979e-01,  0.000000000e+00,  3.277771260e-02,  1.061185160e-02],
                         [-8.000000000e-10,  0.000000000e+00,  0.000000000e+00,  2.000000000e-10,  0.000000000e+00,  0.000000000e+00,  6.000000000e-10,  0.000000000e+00,  0.000000000e+00],
                         [ 0.000000000e+00, -3.291406866e-01,  2.021001856e-01,  0.000000000e+00, -3.437100160e-02,  3.277771260e-02,  0.000000000e+00,  3.635116882e-01, -2.348778982e-01],
                         [ 0.000000000e+00,  2.676556108e-01, -2.388799495e-01,  0.000000000e+00, -3.277771260e-02,  1.061185160e-02,  0.000000000e+00, -2.348778982e-01,  2.282680979e-01]])

print("Testing Energies")
for method in ['scf', 'mp2', 'ccsd(t)']:
    psi_e = psi4.energy(method + '/' + basis_name)
    psijax_e = psijax.core.energy(molecule, basis_name, method)
    print(psijax_e)
    print("\n{} energies match: ".format(method), np.allclose(psi_e, psijax_e, rtol=0.0, atol=1e-6), '\n')
    print('Error:', np.abs(psijax_e - psi_e))
print("\n")
print("\n")

print("Testing Hessians")
for method in ['scf', 'mp2','ccsd(t)']:
    if method == 'scf': cfour_deriv = cfour_scf
    if method == 'mp2': cfour_deriv = cfour_mp2
    if method == 'ccsd(t)': cfour_deriv = cfour_ccsdt
    psijax_deriv = np.asarray(psijax.core.derivative(molecule, basis_name, method, order=2))
    print("\n{} hessians match: ".format(method),np.allclose(psijax_deriv, cfour_deriv,rtol=0.0,atol=1e-4), '\n')
    print('Error:')
    print(np.abs(psijax_deriv - cfour_deriv))
print("\n")
print("\n")


