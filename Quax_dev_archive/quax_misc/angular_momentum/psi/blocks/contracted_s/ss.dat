import psi4
import numpy as np
np.set_printoptions(linewidth=599)

basis {
assign s_orb
[ s_orb ]
cartesian
****
H     0
S   4   1.00
      0.10000000000      0.1000000000
      0.20000000000      0.200000000
      0.30000000000      0.3000000000
      0.40000000000      0.400000000
S   4   1.00
      0.50000000000      0.5000000000
      0.60000000000      0.600000000
      0.70000000000      0.7000000000
      0.80000000000      0.800000000
****
}

molecule h2o {
symmetry c1
units bohr
0 1
H 0.000000000000 0.000000000000 -0.849220457955
H 0.000000000000 0.000000000000  0.849220457955
}

set scf_type pk
set mp2_type conv
set puream false
set e_convergence 10
set d_convergence 10
e, wfn = energy('hf', return_wfn=True)


mol = wfn.molecule()
bs = wfn.basisset()
basis = psi4.core.BasisSet.build(mol)
mints = psi4.core.MintsHelper(basis)

real_c1 = basis.shell(0).original_coef(0)
real_c2 = basis.shell(0).original_coef(1)
print("og coeffs", real_c1, real_c2)

norm_c1 = basis.shell(0).coef(0)
norm_c2 = basis.shell(0).coef(1)
print("normalized coeffs", norm_c1, norm_c2)

erd_c1 = basis.shell(0).erd_coef(0)
erd_c2 = basis.shell(0).erd_coef(1)
print("erd coeffs", erd_c1, erd_c2)

#print("Normalization constant", norm_c1 / real_c1)
#print("Normalization constant", norm_c2 / real_c2)

#print(basis.shell(0).coef(0))
#print(basis.shell(0).coef(1))

S = mints.ao_overlap()
T = mints.ao_kinetic()
V = mints.ao_potential()

print(np.asarray(S))


